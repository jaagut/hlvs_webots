"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import builtins
import collections.abc
import google.protobuf.descriptor
import google.protobuf.internal.containers
import google.protobuf.internal.enum_type_wrapper
import google.protobuf.message
import google.protobuf.timestamp_pb2
import sys
import typing

if sys.version_info >= (3, 10):
    import typing as typing_extensions
else:
    import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor

class _Team:
    ValueType = typing.NewType("ValueType", builtins.int)
    V: typing_extensions.TypeAlias = ValueType

class _TeamEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[_Team.ValueType], builtins.type):
    DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor
    UNKNOWN_TEAM: _Team.ValueType  # 0
    BLUE: _Team.ValueType  # 1
    RED: _Team.ValueType  # 2

class Team(_Team, metaclass=_TeamEnumTypeWrapper):
    """/ The detected team of the robot"""

UNKNOWN_TEAM: Team.ValueType  # 0
BLUE: Team.ValueType  # 1
RED: Team.ValueType  # 2
global___Team = Team

class _State:
    ValueType = typing.NewType("ValueType", builtins.int)
    V: typing_extensions.TypeAlias = ValueType

class _StateEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[_State.ValueType], builtins.type):
    DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor
    UNKNOWN_STATE: _State.ValueType  # 0
    UNPENALISED: _State.ValueType  # 1
    PENALISED: _State.ValueType  # 2

class State(_State, metaclass=_StateEnumTypeWrapper):
    """/ The current playing state of the robot"""

UNKNOWN_STATE: State.ValueType  # 0
UNPENALISED: State.ValueType  # 1
PENALISED: State.ValueType  # 2
global___State = State

class _Role:
    ValueType = typing.NewType("ValueType", builtins.int)
    V: typing_extensions.TypeAlias = ValueType

class _RoleEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[_Role.ValueType], builtins.type):
    DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor
    ROLE_UNDEFINED: _Role.ValueType  # 0
    ROLE_IDLING: _Role.ValueType  # 1
    ROLE_OTHER: _Role.ValueType  # 2
    ROLE_STRIKER: _Role.ValueType  # 3
    ROLE_SUPPORTER: _Role.ValueType  # 4
    ROLE_DEFENDER: _Role.ValueType  # 5
    ROLE_GOALIE: _Role.ValueType  # 6

class Role(_Role, metaclass=_RoleEnumTypeWrapper):
    """/ The role of the robot"""

ROLE_UNDEFINED: Role.ValueType  # 0
ROLE_IDLING: Role.ValueType  # 1
ROLE_OTHER: Role.ValueType  # 2
ROLE_STRIKER: Role.ValueType  # 3
ROLE_SUPPORTER: Role.ValueType  # 4
ROLE_DEFENDER: Role.ValueType  # 5
ROLE_GOALIE: Role.ValueType  # 6
global___Role = Role

class _Action:
    ValueType = typing.NewType("ValueType", builtins.int)
    V: typing_extensions.TypeAlias = ValueType

class _ActionEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[_Action.ValueType], builtins.type):
    DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor
    ACTION_UNDEFINED: _Action.ValueType  # 0
    ACTION_POSITIONING: _Action.ValueType  # 1
    ACTION_GOING_TO_BALL: _Action.ValueType  # 2
    ACTION_TRYING_TO_SCORE: _Action.ValueType  # 3
    ACTION_WAITING: _Action.ValueType  # 4
    ACTION_KICKING: _Action.ValueType  # 5
    ACTION_SEARCHING: _Action.ValueType  # 6
    ACTION_LOCALIZING: _Action.ValueType  # 7

class Action(_Action, metaclass=_ActionEnumTypeWrapper):
    """/ The current action of the robot"""

ACTION_UNDEFINED: Action.ValueType  # 0
ACTION_POSITIONING: Action.ValueType  # 1
ACTION_GOING_TO_BALL: Action.ValueType  # 2
ACTION_TRYING_TO_SCORE: Action.ValueType  # 3
ACTION_WAITING: Action.ValueType  # 4
ACTION_KICKING: Action.ValueType  # 5
ACTION_SEARCHING: Action.ValueType  # 6
ACTION_LOCALIZING: Action.ValueType  # 7
global___Action = Action

class _OffensiveSide:
    ValueType = typing.NewType("ValueType", builtins.int)
    V: typing_extensions.TypeAlias = ValueType

class _OffensiveSideEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[_OffensiveSide.ValueType], builtins.type):
    DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor
    SIDE_UNDEFINED: _OffensiveSide.ValueType  # 0
    SIDE_LEFT: _OffensiveSide.ValueType  # 1
    SIDE_MIDDLE: _OffensiveSide.ValueType  # 2
    SIDE_RIGHT: _OffensiveSide.ValueType  # 3

class OffensiveSide(_OffensiveSide, metaclass=_OffensiveSideEnumTypeWrapper):
    """/ The offensive strategy of the robot"""

SIDE_UNDEFINED: OffensiveSide.ValueType  # 0
SIDE_LEFT: OffensiveSide.ValueType  # 1
SIDE_MIDDLE: OffensiveSide.ValueType  # 2
SIDE_RIGHT: OffensiveSide.ValueType  # 3
global___OffensiveSide = OffensiveSide

@typing_extensions.final
class fvec2(google.protobuf.message.Message):
    """/ A column vector of two floats"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    X_FIELD_NUMBER: builtins.int
    Y_FIELD_NUMBER: builtins.int
    x: builtins.float
    y: builtins.float
    def __init__(
        self,
        *,
        x: builtins.float = ...,
        y: builtins.float = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["x", b"x", "y", b"y"]) -> None: ...

global___fvec2 = fvec2

@typing_extensions.final
class fvec3(google.protobuf.message.Message):
    """/ A column vector of three floats"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    X_FIELD_NUMBER: builtins.int
    Y_FIELD_NUMBER: builtins.int
    Z_FIELD_NUMBER: builtins.int
    x: builtins.float
    y: builtins.float
    z: builtins.float
    def __init__(
        self,
        *,
        x: builtins.float = ...,
        y: builtins.float = ...,
        z: builtins.float = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["x", b"x", "y", b"y", "z", b"z"]) -> None: ...

global___fvec3 = fvec3

@typing_extensions.final
class fmat3(google.protobuf.message.Message):
    """/ A matrix of three vectors
    / Specified as column vectors
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    X_FIELD_NUMBER: builtins.int
    Y_FIELD_NUMBER: builtins.int
    Z_FIELD_NUMBER: builtins.int
    @property
    def x(self) -> global___fvec3: ...
    @property
    def y(self) -> global___fvec3: ...
    @property
    def z(self) -> global___fvec3: ...
    def __init__(
        self,
        *,
        x: global___fvec3 | None = ...,
        y: global___fvec3 | None = ...,
        z: global___fvec3 | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["x", b"x", "y", b"y", "z", b"z"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["x", b"x", "y", b"y", "z", b"z"]) -> None: ...

global___fmat3 = fmat3

@typing_extensions.final
class Robot(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    PLAYER_ID_FIELD_NUMBER: builtins.int
    POSITION_FIELD_NUMBER: builtins.int
    COVARIANCE_FIELD_NUMBER: builtins.int
    TEAM_FIELD_NUMBER: builtins.int
    player_id: builtins.int
    """/ ID of the robot, 0 if not known"""
    @property
    def position(self) -> global___fvec3:
        """/ The position of the robot on the field according to the following convention
        / x meters along the field with 0 at the centre of the field and positive towards opponent goals
        / y meters across the field with 0 at the centre of the field and positive to the left
        / Î¸ orientation of the robot (anti-clockwise from the x axis from above the field)
        """
    @property
    def covariance(self) -> global___fmat3:
        """/ The covariance measure of the robots [x, y, Î¸] values
        / If this is unavailable leave this unset
        """
    team: global___Team.ValueType
    """/ Robot team, if known"""
    def __init__(
        self,
        *,
        player_id: builtins.int = ...,
        position: global___fvec3 | None = ...,
        covariance: global___fmat3 | None = ...,
        team: global___Team.ValueType = ...,
    ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["covariance", b"covariance", "position", b"position"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["covariance", b"covariance", "player_id", b"player_id", "position", b"position", "team", b"team"]) -> None: ...

global___Robot = Robot

@typing_extensions.final
class Ball(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    POSITION_FIELD_NUMBER: builtins.int
    VELOCITY_FIELD_NUMBER: builtins.int
    COVARIANCE_FIELD_NUMBER: builtins.int
    @property
    def position(self) -> global___fvec3:
        """/ The position of the ball on the field according to the following convention
        / x meters along the field with 0 at the centre of the field and positive towards opponent goals
        / y meters across the field with 0 at the centre of the field and positive to the left
        / z meters above the field with 0 at the surface of the field and positive up
        """
    @property
    def velocity(self) -> global___fvec3:
        """/ The velocity of the ball
        / x m/s along the field with 0 at the centre of the field and positive towards opponent goals
        / y m/s across the field with 0 at the centre of the field and positive to the left
        / z m/s above the field with 0 at the surface of the field and positive up
        / Set to 0 if not available
        """
    @property
    def covariance(self) -> global___fmat3:
        """/ The covariance measure of the balls [x, y, z] values
        / If this is unavailable leave this unset
        """
    def __init__(
        self,
        *,
        position: global___fvec3 | None = ...,
        velocity: global___fvec3 | None = ...,
        covariance: global___fmat3 | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["covariance", b"covariance", "position", b"position", "velocity", b"velocity"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["covariance", b"covariance", "position", b"position", "velocity", b"velocity"]) -> None: ...

global___Ball = Ball

@typing_extensions.final
class Message(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    TIMESTAMP_FIELD_NUMBER: builtins.int
    STATE_FIELD_NUMBER: builtins.int
    CURRENT_POSE_FIELD_NUMBER: builtins.int
    WALK_COMMAND_FIELD_NUMBER: builtins.int
    TARGET_POSE_FIELD_NUMBER: builtins.int
    KICK_TARGET_FIELD_NUMBER: builtins.int
    BALL_FIELD_NUMBER: builtins.int
    OTHERS_FIELD_NUMBER: builtins.int
    MAX_WALKING_SPEED_FIELD_NUMBER: builtins.int
    TIME_TO_BALL_FIELD_NUMBER: builtins.int
    ROLE_FIELD_NUMBER: builtins.int
    ACTION_FIELD_NUMBER: builtins.int
    OFFENSIVE_SIDE_FIELD_NUMBER: builtins.int
    OTHER_ROBOT_CONFIDENCE_FIELD_NUMBER: builtins.int
    @property
    def timestamp(self) -> google.protobuf.timestamp_pb2.Timestamp:
        """/ Timestamp of message creation"""
    state: global___State.ValueType
    """/ The robots current state"""
    @property
    def current_pose(self) -> global___Robot:
        """/ Position, orientation, and covariance of the player on the field"""
    @property
    def walk_command(self) -> global___fvec3:
        """/ The current walk speed of the robot in it's local [x, y, Î¸] coordinates
        / x and y in m/s and Î¸ in rad/s
        / positive x being forwards, positive y being strafing to the left, and positive Î¸ being anti-clockwise
        """
    @property
    def target_pose(self) -> global___Robot:
        """/ Position and orientation of the players target on the field specified"""
    @property
    def kick_target(self) -> global___fvec2:
        """/ Position that the robot is aiming to kick the ball to
        / If no kick is planned set to [0, 0]
        / Vector has origin on the ground between the robots feet
        """
    @property
    def ball(self) -> global___Ball:
        """/ Position, velocity, and covariance of the ball on the field"""
    @property
    def others(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___Robot]:
        """/ Position, orientation, and covariance of detected robots on the field"""
    max_walking_speed: builtins.float
    """***************************
    EXTENSIONS GO BELOW HERE *
    **************************

    / Maximum walking speed of the robot
    """
    time_to_ball: builtins.float
    """/ Time the robot needs to reach the ball;"""
    role: global___Role.ValueType
    """/ The role of the robot"""
    action: global___Action.ValueType
    """/ The current action of the robot"""
    offensive_side: global___OffensiveSide.ValueType
    """/ The offensive strategy of the robot"""
    @property
    def other_robot_confidence(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.float]:
        """/ Confidence values of the obstacles"""
    def __init__(
        self,
        *,
        timestamp: google.protobuf.timestamp_pb2.Timestamp | None = ...,
        state: global___State.ValueType = ...,
        current_pose: global___Robot | None = ...,
        walk_command: global___fvec3 | None = ...,
        target_pose: global___Robot | None = ...,
        kick_target: global___fvec2 | None = ...,
        ball: global___Ball | None = ...,
        others: collections.abc.Iterable[global___Robot] | None = ...,
        max_walking_speed: builtins.float = ...,
        time_to_ball: builtins.float = ...,
        role: global___Role.ValueType = ...,
        action: global___Action.ValueType = ...,
        offensive_side: global___OffensiveSide.ValueType = ...,
        other_robot_confidence: collections.abc.Iterable[builtins.float] | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["ball", b"ball", "current_pose", b"current_pose", "kick_target", b"kick_target", "target_pose", b"target_pose", "timestamp", b"timestamp", "walk_command", b"walk_command"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["action", b"action", "ball", b"ball", "current_pose", b"current_pose", "kick_target", b"kick_target", "max_walking_speed", b"max_walking_speed", "offensive_side", b"offensive_side", "other_robot_confidence", b"other_robot_confidence", "others", b"others", "role", b"role", "state", b"state", "target_pose", b"target_pose", "time_to_ball", b"time_to_ball", "timestamp", b"timestamp", "walk_command", b"walk_command"]) -> None: ...

global___Message = Message
